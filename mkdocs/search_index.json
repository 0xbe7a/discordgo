{
    "docs": [
        {
            "location": "/", 
            "text": "DiscordGo\n\n\n\n\n\n\nGo\n (golang) interface for the \nDiscord\n \nchat service.  Provides both low-level direct bindings to the \nDiscord API and helper functions that allow you to make custom clients and chat \nbot applications easily.\n\n\nDiscord\n is an all-in-one voice and text chat for \ngamers that\ns free, secure, and works on both your desktop and phone. \n\n\nWhy DiscordGo?\n\n\n\n\nHigh Performance\n\n\nMinimal Memory \n CPU Load\n\n\nLow-level bindings to Discord REST API Endpoints\n\n\nSupport for the data websocket interface\n\n\nMulti-Server voice connections (send and receive)\n\n\nState tracking and caching\n\n\n\n\nLearn More\n\n\n\n\nCheck out the \nGetting Started\n section\n\n\nRead the reference docs on \nGodoc\n or \nGoWalker\n\n\nTry the \nexamples\n\n\nExplore \nAwesome DiscordGo\n\n\n\n\nJoin Us!\n\n\nBoth of the below links take you to chat channels where you can get more \ninformation and support for DiscordGo.  There\ns also a chance to make some \nfriends :)\n\n\n\n\nJoin the \nDiscord Gophers\n chat server dedicated to Go programming.\n\n\nJoin the \nDiscord API\n chat server dedicated to the Discord API.", 
            "title": "Home"
        }, 
        {
            "location": "/#discordgo", 
            "text": "Go  (golang) interface for the  Discord  \nchat service.  Provides both low-level direct bindings to the \nDiscord API and helper functions that allow you to make custom clients and chat \nbot applications easily.  Discord  is an all-in-one voice and text chat for \ngamers that s free, secure, and works on both your desktop and phone.", 
            "title": "DiscordGo"
        }, 
        {
            "location": "/#why-discordgo", 
            "text": "High Performance  Minimal Memory   CPU Load  Low-level bindings to Discord REST API Endpoints  Support for the data websocket interface  Multi-Server voice connections (send and receive)  State tracking and caching", 
            "title": "Why DiscordGo?"
        }, 
        {
            "location": "/#learn-more", 
            "text": "Check out the  Getting Started  section  Read the reference docs on  Godoc  or  GoWalker  Try the  examples  Explore  Awesome DiscordGo", 
            "title": "Learn More"
        }, 
        {
            "location": "/#join-us", 
            "text": "Both of the below links take you to chat channels where you can get more \ninformation and support for DiscordGo.  There s also a chance to make some \nfriends :)   Join the  Discord Gophers  chat server dedicated to Go programming.  Join the  Discord API  chat server dedicated to the Discord API.", 
            "title": "Join Us!"
        }, 
        {
            "location": "/GettingStarted/", 
            "text": "Getting Started\n\n\nThis page is dedicated to helping you get started on your way to making the\nnext great Discord bot or client with DiscordGo. Once you\nve done that please\ndon\nt forget to submit it to the \n\nAwesome DiscordGo\n list :).\n\n\nFirst, lets cover a few topics so you can make the best choices on how to \nmove forward from here.\n\n\nMaster vs Develop\n\n\nWhen installing DiscordGo you will need to decide if you want to use the current\nmaster branch or the bleeding edge development branch.\n\n\n\n\n\n\nThe \nmaster\n branch represents the latest released version of DiscordGo. This\nbranch will always have a stable and tested version of the library. Each \nrelease is tagged and you can easily download a specific release and view the \nrelease notes on the github \nreleases\n \npage.\n\n\n\n\n\n\nThe \ndevelop\n branch is where all development happens and almost always has\nnew features over the master branch.  However breaking changes are frequently\nadded the develop branch and sometimes bugs are introduced.  Bugs get fixed\nand the breaking changes get documented before pushing to master.  \n\n\n\n\n\n\nSo, what should you use?\n\n\nDue to the how frequently the Discord API is changing there is a high chance\nthat the \nmaster\n branch may be lacking important features.  Because of that, if\nyou can accept the constant changing nature of the \ndevelop\n branch and the \nchance that it may occasionally contain bugs then it is the recommended branch \nto use.  Otherwise, if you want to tail behind development slightly and have a \nmore stable package with documented releases then please use the \nmaster\n \nbranch instead.\n\n\nClient vs Bot\n\n\nYou probably already know the answer to this but now is a good time to decide\nif your goal is to write a client application or a bot.  DiscordGo aims to fully\nsupport both client applications and bots but there are some differences \nbetween the two that you should understand.\n\n\nClient Application\n\n\nA client application is a program that is intended to be used by a normal user \nas a replacement for the official clients that Discord provides. An example of\nthis would be a terminal client used to read and send messages with your normal\nuser account or possibly a new desktop client that provides a different set of\nfeatures than the official desktop client that Discord already provides.\n\n\nClient applications work with normal user accounts and you can login with an\nemail address and password or a special authentication token.  However, normal\nuser accounts are not allowed to perform any type of automation and doing so can\ncause the account to be banned from Discord. Also normal user accounts do not \nsupport multi-server voice connections and some other features that are \nexclusive to Bot accounts only.\n\n\nTo create a new user account (if you have not done so already) visit the \n\nDiscord\n website and click on the \n\nTry Discord Now, It\ns Free\n button then follow the steps to setup your\nnew account.\n\n\nBot Application\n\n\nA bot application is a special program that interacts with the Discord servers\nto perform some form of automation or provide some type of service.  Examples \nare things like number trivia games, music streaming, channel moderation, \nsending reminders, playing loud airhorn sounds, comic generators, YouTube \nintegration, Twitch integration.. You\nre \nalmost\n only limited by your imagination.\n\n\nBot applications require the use of a special Bot account.  These accounts are\ntied to your personal user account. Bot accounts cannot login with the normal\nuser clients and they cannot join servers the same way a user does. They do not \nhave access to some user client specific features however they gain access to\nmany Bot specific features.\n\n\nTo create a new bot account first create yourself a normal user account on \nDiscord then visit the \nMy Applications\n\npage and click on the \nNew Application\n box.  Follow the prompts from there\nto finish creating your account.\n\n\nMore information about Bots vs Client accounts can be found \nhere\n\n\nRequirements\n\n\nDiscordGo requires Go version 1.4 or higher.  It has been tested to compile and\nrun successfully on Debian Linux 8, FreeBSD 10, and Windows 7.  It is expected \nthat it should work anywhere Go 1.4 or higher works. If you run into problems\nplease let us know :)\n\n\nYou must already have a working Go environment setup to use DiscordGo.  If you \nare new to Go and have not yet installed and tested it on your computer then \nplease visit \nthis page\n first then I highly\nrecommend you walk though \nA Tour of Go\n to\nhelp get your familiar with the Go language.  Also checkout the relevent Go plugin \nfor your editor - they are hugely helpful when developing Go code.\n\n\n\n\nVim - \nvim-go\n\n\nSublime - \nGoSublime\n\n\nAtom - \ngo-plus\n\n\nVisual Studio - \nvscode-go\n\n\n\n\nInstall DiscordGo\n\n\nLike any other Go package the fist step is to \ngo get\n the package.  This will\nalways pull the latest released version from the master branch. Then run \n\ngo install\n to compile and install the libraries on your system.\n\n\nLinux/BSD\n\n\nRun go get to download the package to your GOPATH/src folder.\n\n\ngo get github.com/bwmarrin/discordgo\n\n\n\n\nIf you want to use the develop branch, follow these steps next.\n\n\ncd $GOPATH/src/github.com/bwmarrin/discordgo\ngit checkout develop\n\n\n\n\nFinally, compile and install the package into the GOPATH/pkg folder. This isn\nt\nabsolutely required but doing this will allow the Go plugin for your editor to\nprovide autocomplete for all DiscordGo functions.\n\n\ncd $GOPATH/src/github.com/bwmarrin/discordgo\ngo install\n\n\n\n\nWindows\n\n\nPlaceholder.\n\n\nNext\n\n\nMore coming soon.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#getting-started", 
            "text": "This page is dedicated to helping you get started on your way to making the\nnext great Discord bot or client with DiscordGo. Once you ve done that please\ndon t forget to submit it to the  Awesome DiscordGo  list :).  First, lets cover a few topics so you can make the best choices on how to \nmove forward from here.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GettingStarted/#master-vs-develop", 
            "text": "When installing DiscordGo you will need to decide if you want to use the current\nmaster branch or the bleeding edge development branch.    The  master  branch represents the latest released version of DiscordGo. This\nbranch will always have a stable and tested version of the library. Each \nrelease is tagged and you can easily download a specific release and view the \nrelease notes on the github  releases  \npage.    The  develop  branch is where all development happens and almost always has\nnew features over the master branch.  However breaking changes are frequently\nadded the develop branch and sometimes bugs are introduced.  Bugs get fixed\nand the breaking changes get documented before pushing to master.      So, what should you use?  Due to the how frequently the Discord API is changing there is a high chance\nthat the  master  branch may be lacking important features.  Because of that, if\nyou can accept the constant changing nature of the  develop  branch and the \nchance that it may occasionally contain bugs then it is the recommended branch \nto use.  Otherwise, if you want to tail behind development slightly and have a \nmore stable package with documented releases then please use the  master  \nbranch instead.", 
            "title": "Master vs Develop"
        }, 
        {
            "location": "/GettingStarted/#client-vs-bot", 
            "text": "You probably already know the answer to this but now is a good time to decide\nif your goal is to write a client application or a bot.  DiscordGo aims to fully\nsupport both client applications and bots but there are some differences \nbetween the two that you should understand.", 
            "title": "Client vs Bot"
        }, 
        {
            "location": "/GettingStarted/#client-application", 
            "text": "A client application is a program that is intended to be used by a normal user \nas a replacement for the official clients that Discord provides. An example of\nthis would be a terminal client used to read and send messages with your normal\nuser account or possibly a new desktop client that provides a different set of\nfeatures than the official desktop client that Discord already provides.  Client applications work with normal user accounts and you can login with an\nemail address and password or a special authentication token.  However, normal\nuser accounts are not allowed to perform any type of automation and doing so can\ncause the account to be banned from Discord. Also normal user accounts do not \nsupport multi-server voice connections and some other features that are \nexclusive to Bot accounts only.  To create a new user account (if you have not done so already) visit the  Discord  website and click on the  Try Discord Now, It s Free  button then follow the steps to setup your\nnew account.", 
            "title": "Client Application"
        }, 
        {
            "location": "/GettingStarted/#bot-application", 
            "text": "A bot application is a special program that interacts with the Discord servers\nto perform some form of automation or provide some type of service.  Examples \nare things like number trivia games, music streaming, channel moderation, \nsending reminders, playing loud airhorn sounds, comic generators, YouTube \nintegration, Twitch integration.. You re  almost  only limited by your imagination.  Bot applications require the use of a special Bot account.  These accounts are\ntied to your personal user account. Bot accounts cannot login with the normal\nuser clients and they cannot join servers the same way a user does. They do not \nhave access to some user client specific features however they gain access to\nmany Bot specific features.  To create a new bot account first create yourself a normal user account on \nDiscord then visit the  My Applications \npage and click on the  New Application  box.  Follow the prompts from there\nto finish creating your account.  More information about Bots vs Client accounts can be found  here", 
            "title": "Bot Application"
        }, 
        {
            "location": "/GettingStarted/#requirements", 
            "text": "DiscordGo requires Go version 1.4 or higher.  It has been tested to compile and\nrun successfully on Debian Linux 8, FreeBSD 10, and Windows 7.  It is expected \nthat it should work anywhere Go 1.4 or higher works. If you run into problems\nplease let us know :)  You must already have a working Go environment setup to use DiscordGo.  If you \nare new to Go and have not yet installed and tested it on your computer then \nplease visit  this page  first then I highly\nrecommend you walk though  A Tour of Go  to\nhelp get your familiar with the Go language.  Also checkout the relevent Go plugin \nfor your editor - they are hugely helpful when developing Go code.   Vim -  vim-go  Sublime -  GoSublime  Atom -  go-plus  Visual Studio -  vscode-go", 
            "title": "Requirements"
        }, 
        {
            "location": "/GettingStarted/#install-discordgo", 
            "text": "Like any other Go package the fist step is to  go get  the package.  This will\nalways pull the latest released version from the master branch. Then run  go install  to compile and install the libraries on your system.", 
            "title": "Install DiscordGo"
        }, 
        {
            "location": "/GettingStarted/#linuxbsd", 
            "text": "Run go get to download the package to your GOPATH/src folder.  go get github.com/bwmarrin/discordgo  If you want to use the develop branch, follow these steps next.  cd $GOPATH/src/github.com/bwmarrin/discordgo\ngit checkout develop  Finally, compile and install the package into the GOPATH/pkg folder. This isn t\nabsolutely required but doing this will allow the Go plugin for your editor to\nprovide autocomplete for all DiscordGo functions.  cd $GOPATH/src/github.com/bwmarrin/discordgo\ngo install", 
            "title": "Linux/BSD"
        }, 
        {
            "location": "/GettingStarted/#windows", 
            "text": "Placeholder.", 
            "title": "Windows"
        }, 
        {
            "location": "/GettingStarted/#next", 
            "text": "More coming soon.", 
            "title": "Next..."
        }
    ]
}